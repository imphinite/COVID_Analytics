// <auto-generated />
using System;
using DataAccessLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(AnalyticsContext))]
    partial class AnalyticsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimAgeGroup", b =>
                {
                    b.Property<Guid>("DimAgeGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgeGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(128) default 'Unknown'");

                    b.HasKey("DimAgeGroupKey");

                    b.ToTable("DimAgeGroups");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimCase", b =>
                {
                    b.Property<Guid>("DimCaseKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassificationReported")
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("DimAgeGroupKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DimHealthAuthorityKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("date");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("DimCaseKey");

                    b.HasIndex("DimAgeGroupKey");

                    b.HasIndex("DimHealthAuthorityKey");

                    b.ToTable("DimCases");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimHealthAuthority", b =>
                {
                    b.Property<Guid>("DimHealthAuthorityKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DimRegionKey")
                        .HasColumnType("uniqueidentifier default NEWID()");

                    b.Property<Guid>("HealthAuthorityID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DimHealthAuthorityKey");

                    b.HasIndex("DimRegionKey");

                    b.ToTable("DimHealthAuthorities");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimHealthServiceDeliveryArea", b =>
                {
                    b.Property<Guid>("DimHealthServiceDeliveryAreaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("DimHealthAuthorityKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthServiceDeliveryAreaID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DimHealthServiceDeliveryAreaKey");

                    b.HasIndex("DimHealthAuthorityKey");

                    b.ToTable("DimHealthServiceDeliveryAreas");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimLabTestReport", b =>
                {
                    b.Property<Guid>("DimLabTestReportKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DimHealthAuthorityKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabTestReportID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewTests")
                        .HasColumnType("integer default '0'");

                    b.Property<decimal>("Positivity")
                        .HasColumnType("decimal(10,1) default '0.0'");

                    b.Property<int>("TotalTests")
                        .HasColumnType("integer default '0'");

                    b.Property<decimal>("TurnAround")
                        .HasColumnType("decimal(10,1) default '0.0'");

                    b.HasKey("DimLabTestReportKey");

                    b.HasIndex("DimHealthAuthorityKey");

                    b.ToTable("DimLabTestReports");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimRegion", b =>
                {
                    b.Property<Guid>("DimRegionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier default NEWID()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DimRegionKey");

                    b.ToTable("DimRegions");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.AgeGroup", b =>
                {
                    b.Property<Guid>("AgeGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(128) default 'Unknown'");

                    b.HasKey("AgeGroupID");

                    b.ToTable("AgeGroups");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Case", b =>
                {
                    b.Property<Guid>("CaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgeGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassificationReported")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("HealthAuthorityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("date");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("CaseID");

                    b.HasIndex("AgeGroupID");

                    b.HasIndex("HealthAuthorityID");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.HealthAuthority", b =>
                {
                    b.Property<Guid>("HealthAuthorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthAuthorityID");

                    b.HasIndex("RegionID");

                    b.ToTable("HealthAuthorities");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.HealthServiceDeliveryArea", b =>
                {
                    b.Property<Guid>("HealthServiceDeliveryAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("HealthAuthorityID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthServiceDeliveryAreaID");

                    b.HasIndex("HealthAuthorityID");

                    b.ToTable("HealthServiceDeliveryAreas");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.LabTestReport", b =>
                {
                    b.Property<Guid>("LabTestReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("HealthAuthorityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewTests")
                        .HasColumnType("integer default '0'");

                    b.Property<decimal>("Positivity")
                        .HasColumnType("decimal(10,1) default '0.0'");

                    b.Property<int>("TotalTests")
                        .HasColumnType("integer default '0'");

                    b.Property<decimal>("TurnAround")
                        .HasColumnType("decimal(10,1) default '0.0'");

                    b.HasKey("LabTestReportID");

                    b.HasIndex("HealthAuthorityID");

                    b.ToTable("LabTestReports");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Region", b =>
                {
                    b.Property<Guid>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128) default 'Unknown'");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(128) default 'Unknown'");

                    b.HasKey("RegionID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimCase", b =>
                {
                    b.HasOne("DataAccessLibrary.Dimensions.DimAgeGroup", "DimAgeGroup")
                        .WithMany()
                        .HasForeignKey("DimAgeGroupKey");

                    b.HasOne("DataAccessLibrary.Dimensions.DimHealthAuthority", "DimHealthAuthority")
                        .WithMany()
                        .HasForeignKey("DimHealthAuthorityKey");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimHealthAuthority", b =>
                {
                    b.HasOne("DataAccessLibrary.Dimensions.DimRegion", "DimRegion")
                        .WithMany()
                        .HasForeignKey("DimRegionKey");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimHealthServiceDeliveryArea", b =>
                {
                    b.HasOne("DataAccessLibrary.Dimensions.DimHealthAuthority", "DimHealthAuthority")
                        .WithMany("DimHealthServiceDeliveryAreas")
                        .HasForeignKey("DimHealthAuthorityKey");
                });

            modelBuilder.Entity("DataAccessLibrary.Dimensions.DimLabTestReport", b =>
                {
                    b.HasOne("DataAccessLibrary.Dimensions.DimHealthAuthority", "DimHealthAuthority")
                        .WithMany()
                        .HasForeignKey("DimHealthAuthorityKey");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Case", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.HealthAuthority", "HealthAuthority")
                        .WithMany()
                        .HasForeignKey("HealthAuthorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLibrary.Models.HealthAuthority", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLibrary.Models.HealthServiceDeliveryArea", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.HealthAuthority", "HealthAuthority")
                        .WithMany("HealthServiceDeliveryAreas")
                        .HasForeignKey("HealthAuthorityID");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.LabTestReport", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.HealthAuthority", "HealthAuthority")
                        .WithMany()
                        .HasForeignKey("HealthAuthorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
